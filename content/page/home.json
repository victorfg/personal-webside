{
  "rows": [
    {
      "title": "Good practices in React",
      "blocks": [
        {
          "block": "### *Use an object for update multiple states*\n\nReact state keeps track of the data which when changed triggers the React component to re-render.  The more data you have to keep track of across your app.\n\n<CodeBlock\n  children=\"const [state, setState] = useState({\n    gender: &#x22;&#x22;,\n    name: &#x22;&#x22;,\n    age: 23\n  });\n\n  const onClick = () => {\n    setState((prevState) => ({\n      ...prevState,\n      age: prevState.age + 1,\n      name: &#x22;John&#x22;,\n      gender: 'male',\n    }));\n  };\"\n  language=\"jsx\"\n/>\n\n### *Avoid using indexes as key props*\n\nWith keys, React can point which item has been changed, added, or removed from the array.\n\nIt is not recommended recommend using indexes for keys if the order of items may change. \n\n<CodeBlock\n  children=\"const todoItems = todos.map((todo) =>\n    <li key={todo.id}>\n      {todo.text}\n    </li>\n  );\"\n/>\n\n[https://reactjs.org/docs/lists-and-keys.html](https://reactjs.org/docs/lists-and-keys.html \"\")\n\n### *Use object destructuring for props*\n\nIt's cleaner and easy to read\n\n<CodeBlock\n  children=\"const Button = ({text}) => {\n    return <button>{text}</button>;\n  };\"\n/>\n\n\n\n### *Use Object Literals*\n\nIt's make our code more readable.\n\nIn this example we can't use ternary because there are more than two options and it's better to start using if's.\n\n<CodeBlock\n  children=\"const {type} = animals\n\n  const components = {\n    LION: AdminUser,\n    CAT: EmployeeUser,\n    DOG: NormalUser\n  };\n\n  const Component = components[type];\n\n  return <Component />;\"\n/>\n\n\n\n### *Keep render as clean as possible*\n\nMinimum logic inside render components.\n\n<CodeBlock\n  children=\"const getUsers = () => dispatch(ACTION_GET_USERS)\n\n  return (\n    <button onClick={getUsers}>  \n      getUsers Button\n    </button>  \n  )\"\n/>\n\n\n\n### *Use Template Literals*\n\nTry to avoid using string concatenation.\n\n<CodeBlock\n  children=\"const animalDetails = `${animal.name} lives in ${animal.country} and eats ${animal.food}`\n\n  return (\n    <div> {animalDetails} </div>  \n  )\"\n/>\n\n\n\n### *Conclusion*\n\nCongratulations if you’ve made it this far! I hope you learned a thing or two from this article.\n\nI hope you have a wonderful day!\n"
        }
      ],
      "tags": [
        "javascript",
        "react"
      ],
      "date": "2022-12-09T23:00:00.000Z"
    }
  ],
  "_collection": "page",
  "_keepTemplateKey": false,
  "_template": "page",
  "_relativePath": "home.json",
  "_id": "content/page/home.json"
}